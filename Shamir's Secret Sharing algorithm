import org.json.JSONObject;
import java.io.FileReader;
import java.math.BigInteger;
import java.util.HashMap;
import java.util.Map;

public class ShamirSecretSharing {
    public static void main(String[] args) {
        try {
            // Read the JSON input file
            FileReader reader = new FileReader("input.json");
            char[] buffer = new char[1024];
            int length = reader.read(buffer);
            String jsonString = new String(buffer, 0, length);
            reader.close();

            // Parse the JSON input
            JSONObject jsonObject = new JSONObject(jsonString);
            JSONObject keys = jsonObject.getJSONObject("keys");
            int n = keys.getInt("n");
            int k = keys.getInt("k");

            Map<Integer, BigInteger> points = new HashMap<>();

            // Decode the (x, y) pairs
            for (String key : jsonObject.keySet()) {
                if (!key.equals("keys")) {
                    JSONObject point = jsonObject.getJSONObject(key);
                    int x = Integer.parseInt(key);
                    int base = point.getInt("base");
                    String value = point.getString("value");
                    BigInteger y = new BigInteger(value, base);
                    points.put(x, y);
                }
            }

            // Find the constant term 'c' using Lagrange Interpolation
            BigInteger constantTerm = lagrangeInterpolation(points, k);

            // Print the secret 'c'
            System.out.println("The secret (constant term) is: " + constantTerm);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Lagrange Interpolation to find the constant term
    public static BigInteger lagrangeInterpolation(Map<Integer, BigInteger> points, int k) {
        BigInteger constant = BigInteger.ZERO;
        int[] xValues = new int[k];
        BigInteger[] yValues = new BigInteger[k];
        int index = 0;

        // Collect first 'k' points
        for (Map.Entry<Integer, BigInteger> entry : points.entrySet()) {
            if (index >= k) break;
            xValues[index] = entry.getKey();
            yValues[index] = entry.getValue();
            index++;
        }

        // Calculate the Lagrange basis polynomials
        for (int i = 0; i < k; i++) {
            BigInteger numerator = BigInteger.ONE;
            BigInteger denominator = BigInteger.ONE;

            for (int j = 0; j < k; j++) {
                if (i != j) {
                    numerator = numerator.multiply(BigInteger.valueOf(-xValues[j]));
                    denominator = denominator.multiply(BigInteger.valueOf(xValues[i] - xValues[j]));
                }
            }

            BigInteger term = yValues[i].multiply(numerator).divide(denominator);
            constant = constant.add(term);
        }

        return constant;
    }
}
